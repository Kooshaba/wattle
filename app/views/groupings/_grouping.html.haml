.clearfix
  .states-and-environments-container.pull-left
    .current_state{class: "#{grouping.state}-tag"}
      = grouping.state.capitalize
    - grouping.app_envs(filters).each do |app_env|
      .alert.alert-info
        = app_env
  .pull-right.action-items
    = render partial: "state", locals: {group: grouping}
- wat = grouping.representative_wat
- if wat
  %h2
    = wat_heading(wat)
  %pre= wat.message

.grouping_summary
  .item
    .badge.badge-warning
      = wats.count
    Incidents,
    .badge.badge-warning
      = grouping.app_user_count(filters: filters)
    users affected
    - if grouping.app_user_stats(filters: filters)[nil].present?
      .badge.badge-warning
        = "+ #{grouping.app_user_stats(filters: filters)[nil]}"
      unknowns,
    .badge.badge-warning
      = grouping.browser_count(filters: filters)
    browsers affected

  - if grouping.app_user_count(filters: filters) > 0
    %ul.plain.unstyled
      - grouping.app_user_stats(filters: filters, limit: 10).each do |user, count|
        %li.row
          .col-md-1
            .badge.badge-info.pull-right=  count
          = link_to 'Groupings', groupings_path( filters: filters.merge(app_user: [user])), {class: "btn-xs btn-primary"}
          = link_to 'Wats', wats_path( filters: filters.merge(app_user: [user])), {class: "btn-xs btn-primary"}
          = link_to 'Filter', grouping_path(grouping, filters: filters.merge(app_user: [user])), {class: "btn-xs btn-primary"}
          = user

  - if grouping.browser_count(filters: filters) > 0
    %ul.plain.unstyled
      - grouping.browser_agent_stats(filters: filters, limit: 10).each do |browser, count|
        %li.row
          .col-md-1
            .badge.pull-right.badge-info=  count
          = browser

  %br
  .well
    .item
      %em
        Application:
      = wat.app_name
      in
      = grouping_envs(grouping)
    .item
      - wat_the_first = wats.order(:captured_at).first
      - wat_the_last = wats.order(:captured_at).last
      %em
        First Incident:
      %span.moment_ago{data: {display_date: "1", title_format: "llll ZZ", time: wat_the_first.captured_at}}
    .item
      %em
        Most Recent Incident:
      %span.moment_ago{data: {display_date: "1", title_format: "llll ZZ", time: wat_the_last.captured_at}}
    .item
      - pages = wats.group(:page_url).pluck(:page_url)
      - if pages.any?
        %em
          On Pages:
          %a{ "data" => {"toggle" => "collapse"}, "href" => "#collapsePage" }
            Show / Hide
        #collapsePage.panel-collapse.collapse
          - pages.uniq.each do |page|
            = link_to truncate(page, length: 120), page, target: "_blank", class: "on-pages-link"
            %br
