.clearfix
  %h2.pull-left.page-title
    - if wat
      = wat_heading(wat)
  .pull-right.states-and-environments-container
    .clearfix
      .current_state.pull-right{class: "#{grouping.state}-tag"}
        = grouping.state.capitalize

    - grouping.app_envs.each do |app_env|
      .pull-right.alert.alert-info
        = app_env

- if wat
  = render partial: "state", locals: {group: grouping}
  %p= wat.message

.grouping_summary
  .item
    .badge.badge-warning
      = wats.count
    Incidents,
    .badge.badge-warning
      = grouping.app_user_count(filters: filters)
    users affected
    - if grouping.app_user_stats(filters: filters)[nil].present?
      .badge.badge-warning
        = "+ #{grouping.app_user_stats(filters: filters)[nil]}"
      unknowns

  - if grouping.app_user_count(filters: filters) > 0
    %ul.plain.unstyled
      - grouping.app_user_stats(filters: filters, limit: 10).each do |user, count|
        %li
          .badge.badge-info=  count
          User:
          =  user


  %br
  .well
    .item
      %em
        Application:
      = wats.group(:app_name).pluck(:app_name).first
      in
      = grouping_envs(grouping)
    .item
      - wat_the_first = wats.order(:created_at).first
      - wat_the_last = wats.order(:created_at).last
      %em
        First Incident:
      %abbr{title: wat_the_first.created_at}
        = time_ago_in_words wat_the_first.created_at
        ago
    .item
      %em
        Most Recent Incident:
      %abbr{title: wat_the_last.created_at}
        = "#{time_ago_in_words wat_the_last.created_at} ago"
    .item
      - pages = wats.group(:page_url).pluck(:page_url)
      - if pages.any?
        %em
          On Pages:
          %a{ "data" => {"toggle" => "collapse"}, "href" => "#collapsePage" }
            Show / Hide
        #collapsePage.panel-collapse.collapse
          - pages.uniq.each do |page|
            = link_to truncate(page, length: 120), page, target: "_blank", class: "on-pages-link"
            %br
